generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id
  username    String
  displayName String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  matchNotes  MatchNote[]
  stamps      Stamp[]
  warnings    Warning[]
  matches     Match[]     @relation("MatchParticipants")

  @@map("users")
}

model Match {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  result       String?
  status       String      @default("pending")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  notes        MatchNote[]
  stamps       Stamp[]
  participants User[]      @relation("MatchParticipants")

  @@map("matches")
}

model Stamp {
  id        Int      @id @default(autoincrement())
  userId    String
  matchId   Int
  createdAt DateTime @default(now())
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("stamps")
}

model Warning {
  id        Int      @id @default(autoincrement())
  userId    String
  reason    String
  issuedBy  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("warnings")
}

model MatchNote {
  id        Int      @id @default(autoincrement())
  matchId   Int
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_notes")
}
